# Server Configuration - Use PORT env var for Render deployment
server.port=${PORT:8080}

# Database Configuration - PostgreSQL (Supabase)
spring.datasource.url=${DB_URL:jdbc:postgresql://localhost:5432/eBay?prepareThreshold=0&preparedStatementCacheQueries=0&cachePrepStmts=false&reWriteBatchedInserts=true}
spring.datasource.username=${DB_USERNAME:postgres}
spring.datasource.password=${DB_PASSWORD:}
spring.datasource.driver-class-name=${DB_DRIVER:org.postgresql.Driver}

# JPA/Hibernate Configuration - Validate existing schema 
spring.jpa.hibernate.ddl-auto=${DDL_AUTO:validate}
spring.jpa.show-sql=false
spring.jpa.database-platform=${DB_DIALECT:org.hibernate.dialect.PostgreSQLDialect}
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.defer-datasource-initialization=true
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

# JPA is now enabled - all DAOs converted to EntityManager

# Connection Pool (HikariCP is default in Spring Boot)
spring.datasource.hikari.maximum-pool-size=5
spring.datasource.hikari.minimum-idle=2
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.idle-timeout=600000
spring.datasource.hikari.max-lifetime=1800000
spring.datasource.hikari.auto-commit=false

# Logging
logging.level.org.springframework.web=INFO
logging.level.com.ebay=DEBUG
logging.pattern.console=%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n

# Static Resources - Serve React app
spring.web.resources.static-locations=classpath:/static/
spring.web.resources.add-mappings=true
spring.mvc.static-path-pattern=/**

# Application Info
spring.application.name=eBay Marketplace
management.endpoints.web.exposure.include=health,info

# Kafka Configuration
spring.kafka.bootstrap-servers=${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.consumer.group-id=ebay-marketplace
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages=*
spring.kafka.consumer.auto-offset-reset=earliest