# Server Configuration - Use PORT env var for Render deployment
server.port=${PORT:8080}

# Database Configuration - PostgreSQL (Supabase) - Optimized for Render deployment
spring.datasource.url=jdbc:postgresql://${SUPABASE_DB_HOST:localhost}:${SUPABASE_DB_PORT:5432}/${SUPABASE_DB_NAME:eBay}?prepareThreshold=0&preparedStatementCacheQueries=0&cachePrepStmts=false&preparedStatementCacheSize=0&disableColumnSanitiser=true&reWriteBatchedInserts=false&useServerPrepStmts=false&stringtype=unspecified&ApplicationName=ebay-marketplace&autosave=never&socketTimeout=60&loginTimeout=60&connectTimeout=60&cancelSignalTimeout=60&tcpKeepAlive=true&sslmode=require
spring.datasource.username=${SUPABASE_DB_USERNAME:postgres}
spring.datasource.password=${SUPABASE_DB_PASSWORD:}
spring.datasource.driver-class-name=${DB_DRIVER:org.postgresql.Driver}

# JPA/Hibernate Configuration - Optimized for Render + Supabase deployment
spring.jpa.hibernate.ddl-auto=${DDL_AUTO:update}
spring.jpa.show-sql=false
spring.jpa.database-platform=${DB_DIALECT:org.hibernate.dialect.PostgreSQLDialect}
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.defer-datasource-initialization=true
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.jpa.properties.hibernate.jdbc.use_get_generated_keys=true
# Render deployment optimizations
spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults=false
spring.jpa.properties.hibernate.hbm2ddl.jdbc_metadata_extraction_strategy=individually
# Add connection resilience for Render
spring.jpa.properties.hibernate.connection.acquisition_timeout=60000
spring.jpa.properties.hibernate.connection.release_mode=after_transaction
# Disable Hibernate prepared statement caching for Render deployment
spring.jpa.properties.hibernate.jdbc.batch_size=0
spring.jpa.properties.hibernate.order_inserts=false
spring.jpa.properties.hibernate.order_updates=false
spring.jpa.properties.hibernate.jdbc.batch_versioned_data=false
spring.jpa.properties.hibernate.connection.handling_mode=DELAYED_ACQUISITION_AND_RELEASE_AFTER_TRANSACTION
# Force disable all prepared statement usage
spring.jpa.properties.hibernate.connection.provider_disables_autocommit=false
spring.jpa.properties.hibernate.jdbc.use_streams_for_binary=false
spring.jpa.properties.hibernate.jdbc.use_scrollable_resultset=false
spring.jpa.properties.hibernate.cache.use_query_cache=false
spring.jpa.properties.hibernate.cache.use_second_level_cache=false

# JPA is now enabled - all DAOs converted to EntityManager

# Connection Pool (HikariCP) - Force longer timeouts for Render
spring.datasource.hikari.maximum-pool-size=1
spring.datasource.hikari.minimum-idle=0
spring.datasource.hikari.connection-timeout=120000
spring.datasource.hikari.idle-timeout=180000  
spring.datasource.hikari.max-lifetime=300000
spring.datasource.hikari.auto-commit=false
spring.datasource.hikari.leak-detection-threshold=0
# Force timeout overrides
spring.datasource.hikari.connectionTimeout=120000
spring.datasource.hikari.validationTimeout=60000
spring.datasource.hikari.initializationFailTimeout=-1

# Logging
logging.level.org.springframework.web=INFO
logging.level.com.ebay=DEBUG
logging.pattern.console=%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n

# Static Resources - Serve React app
spring.web.resources.static-locations=classpath:/static/
spring.web.resources.add-mappings=true
spring.mvc.static-path-pattern=/**

# Application Info
spring.application.name=eBay Marketplace
management.endpoints.web.exposure.include=health,info

# Kafka Configuration
spring.kafka.bootstrap-servers=${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.consumer.group-id=ebay-marketplace
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages=*
spring.kafka.consumer.auto-offset-reset=earliest