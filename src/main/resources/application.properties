# Server Configuration - Use PORT env var for Render deployment
server.port=${PORT:8080}

# Database Configuration - PostgreSQL (AWS RDS)
spring.datasource.url=jdbc:postgresql://${AWS_DB_HOST:localhost}:${AWS_DB_PORT:5432}/${AWS_DB_NAME:eBay}?sslmode=require&ApplicationName=ebay-marketplace
spring.datasource.username=${AWS_DB_USERNAME:postgres}
spring.datasource.password=${AWS_DB_PASSWORD:}
spring.datasource.driver-class-name=${DB_DRIVER:org.postgresql.Driver}

# JPA/Hibernate Configuration - Simplified for AWS RDS
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=false
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
# Extended timeouts for schema creation on AWS RDS  
spring.jpa.properties.hibernate.connection.acquisition_timeout=300000

# JPA is now enabled - all DAOs converted to EntityManager

# Connection Pool (HikariCP) - Optimized for AWS RDS
spring.datasource.hikari.maximum-pool-size=5
spring.datasource.hikari.minimum-idle=1
spring.datasource.hikari.connection-timeout=300000
spring.datasource.hikari.idle-timeout=600000  
spring.datasource.hikari.max-lifetime=1800000
spring.datasource.hikari.auto-commit=true
spring.datasource.hikari.leak-detection-threshold=0
# Extended timeouts for schema creation
spring.datasource.hikari.connectionTimeout=300000
spring.datasource.hikari.validationTimeout=120000
spring.datasource.hikari.initializationFailTimeout=-1

# Logging
logging.level.org.springframework.web=INFO
logging.level.com.ebay=DEBUG
logging.pattern.console=%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n

# Static Resources - Serve React app
spring.web.resources.static-locations=classpath:/static/
spring.web.resources.add-mappings=true
spring.mvc.static-path-pattern=/static/**

# Application Info
spring.application.name=eBay Marketplace
management.endpoints.web.exposure.include=health,info

# Kafka Configuration
spring.kafka.bootstrap-servers=${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.consumer.group-id=ebay-marketplace
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages=*
spring.kafka.consumer.auto-offset-reset=earliest

# GraphQL Configuration
spring.graphql.graphiql.enabled=true
spring.graphql.graphiql.path=/graphiql
spring.graphql.path=/graphql
spring.graphql.websocket.path=/graphql
spring.graphql.cors.allowed-origins=http://localhost:3000,https://ebay-u3h1.onrender.com
spring.graphql.cors.allowed-methods=GET,POST
spring.graphql.schema.printer.enabled=true
spring.graphql.schema.locations=classpath:schema.graphqls