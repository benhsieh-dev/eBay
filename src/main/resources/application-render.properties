# Render Deployment Configuration
# These settings are specifically optimized for Render's PostgreSQL pooler environment

# Server Configuration - Use PORT env var for Render deployment
server.port=${PORT:8080}

# Database Configuration - AWS RDS (via Render environment variables)
spring.datasource.url=jdbc:postgresql://${AWS_DB_HOST}:${AWS_DB_PORT:5432}/${AWS_DB_NAME}?sslmode=require&ApplicationName=ebay-marketplace
spring.datasource.username=${AWS_DB_USERNAME}
spring.datasource.password=${AWS_DB_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA/Hibernate Configuration
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=false
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

# Connection Pool (HikariCP) - Optimized for Render pooler limitations
spring.datasource.hikari.maximum-pool-size=1
spring.datasource.hikari.minimum-idle=0
spring.datasource.hikari.connection-timeout=120000
spring.datasource.hikari.idle-timeout=180000
spring.datasource.hikari.max-lifetime=300000
spring.datasource.hikari.auto-commit=false
spring.datasource.hikari.leak-detection-threshold=0
# Force timeout overrides for Render
spring.datasource.hikari.connectionTimeout=120000
spring.datasource.hikari.validationTimeout=60000
spring.datasource.hikari.initializationFailTimeout=-1

# Hibernate Configuration - Optimized for Render deployment compatibility
spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults=false
spring.jpa.properties.hibernate.hbm2ddl.jdbc_metadata_extraction_strategy=individually
# Add connection resilience for Render
spring.jpa.properties.hibernate.connection.acquisition_timeout=60000
spring.jpa.properties.hibernate.connection.release_mode=after_transaction
# Disable Hibernate prepared statement caching for Render deployment
spring.jpa.properties.hibernate.jdbc.batch_size=0
spring.jpa.properties.hibernate.order_inserts=false
spring.jpa.properties.hibernate.order_updates=false
spring.jpa.properties.hibernate.jdbc.batch_versioned_data=false
spring.jpa.properties.hibernate.connection.handling_mode=DELAYED_ACQUISITION_AND_RELEASE_AFTER_TRANSACTION
# Force disable all prepared statement usage
spring.jpa.properties.hibernate.connection.provider_disables_autocommit=false
spring.jpa.properties.hibernate.jdbc.use_streams_for_binary=false
spring.jpa.properties.hibernate.jdbc.use_scrollable_resultset=false
spring.jpa.properties.hibernate.cache.use_query_cache=false
spring.jpa.properties.hibernate.cache.use_second_level_cache=false

# Kafka Configuration (if needed on Render)
spring.kafka.bootstrap-servers=${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.consumer.group-id=ebay-marketplace
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages=*
spring.kafka.consumer.auto-offset-reset=earliest

# Static Resources - Render specific configuration
spring.web.resources.static-locations=classpath:/static/
spring.mvc.static-path-pattern=/static/**

# GraphQL Configuration
spring.graphql.graphiql.enabled=true
spring.graphql.graphiql.path=/graphiql
spring.graphql.path=/graphql
spring.graphql.websocket.path=/graphql
spring.graphql.cors.allowed-origins=http://localhost:3000,https://ebay-u3h1.onrender.com
spring.graphql.cors.allowed-methods=GET,POST
spring.graphql.schema.printer.enabled=true
spring.graphql.schema.locations=classpath:schema.graphqls

# Application Info
spring.application.name=eBay Marketplace

# Logging
logging.level.org.springframework.web=INFO
logging.level.com.ebay=DEBUG