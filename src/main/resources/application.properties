# Server Configuration - Use PORT env var for Render deployment
server.port=${PORT:8080}

# Microservice Configuration
payment.service.url=${PAYMENT_SERVICE_URL:http://localhost:8081}

# Database Configuration - PostgreSQL (Local) - Active for local development
# spring.datasource.url=jdbc:postgresql://${LOCAL_DB_HOST:localhost}:${LOCAL_DB_PORT:5432}/${LOCAL_DB_NAME:ebay_marketplace}?sslmode=disable&ApplicationName=ebay-marketplace
# spring.datasource.username=${LOCAL_DB_USERNAME:postgres}
# spring.datasource.password=${LOCAL_DB_PASSWORD:}

# Database Configuration - AWS RDS
spring.datasource.url=jdbc:postgresql://${AWS_DB_HOST}:${AWS_DB_PORT}/${AWS_DB_NAME}?sslmode=require&ApplicationName=ebay-marketplace
spring.datasource.username=${AWS_DB_USERNAME}
spring.datasource.password=${AWS_DB_PASSWORD}



# Alternative Database Configuration - PostgreSQL (Supabase) - Commented out due to SSL security requirements
# spring.datasource.url=jdbc:postgresql://${SUPABASE_DB_HOST:localhost}:${SUPABASE_DB_PORT:5432}/${SUPABASE_DB_NAME:eBay}?sslmode=prefer&ApplicationName=ebay-marketplace
# spring.datasource.username=${SUPABASE_DB_USERNAME:postgres}
# spring.datasource.password=${SUPABASE_DB_PASSWORD:}
spring.datasource.driver-class-name=${DB_DRIVER:org.postgresql.Driver}

# JPA/Hibernate Configuration - Clean baseline settings
spring.jpa.hibernate.ddl-auto=${DDL_AUTO:update}
spring.jpa.show-sql=false
spring.jpa.database-platform=${DB_DIALECT:org.hibernate.dialect.PostgreSQLDialect}
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.defer-datasource-initialization=true
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.jpa.properties.hibernate.jdbc.use_get_generated_keys=true

# JPA is now enabled - all DAOs converted to EntityManager

# Connection Pool (HikariCP) - Standard settings for direct database connections
spring.datasource.hikari.maximum-pool-size=${SPRING_DATASOURCE_HIKARI_MAXIMUM_POOL_SIZE:10}
spring.datasource.hikari.minimum-idle=${SPRING_DATASOURCE_HIKARI_MINIMUM_IDLE:2}
spring.datasource.hikari.connection-timeout=${SPRING_DATASOURCE_HIKARI_CONNECTION_TIMEOUT:30000}
spring.datasource.hikari.idle-timeout=600000
spring.datasource.hikari.max-lifetime=${SPRING_DATASOURCE_HIKARI_MAX_LIFETIME:1800000}
spring.datasource.hikari.auto-commit=true

# Logging
logging.level.org.springframework.web=INFO
logging.level.com.ebay=DEBUG
logging.pattern.console=%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n

# Static Resources - Serve React app
spring.web.resources.static-locations=classpath:/static/
spring.web.resources.add-mappings=true
spring.mvc.static-path-pattern=/static/**

# Application Info
spring.application.name=eBay Marketplace
management.endpoints.web.exposure.include=health,info

# Kafka Configuration
spring.kafka.bootstrap-servers=${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.consumer.group-id=ebay-marketplace
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages=*
spring.kafka.consumer.auto-offset-reset=earliest

# GraphQL Configuration
spring.graphql.graphiql.enabled=true
spring.graphql.graphiql.path=/graphiql
spring.graphql.path=/graphql
spring.graphql.websocket.path=/graphql
spring.graphql.cors.allowed-origins=http://localhost:3000,https://ebay-u3h1.onrender.com
spring.graphql.cors.allowed-methods=GET,POST
spring.graphql.schema.printer.enabled=true
spring.graphql.schema.locations=classpath:schema.graphqls